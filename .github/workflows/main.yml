name: Conduit-actions
on: 
  push:
  workflow_dispatch:
    branches: [ main ]
env:
    AWS_REGION: us-east-1
    AWS_SDK_DEBUG: true
    # ECR_REPOSITORY: 
    # ECS_SERVICE:
    # ECS_CLUSTER:
    # ECS_TASK_DEFINITION:
    # CONTAINER_NAME: 
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps: 
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Test frontend
        working-directory: ./frontend
        run: npm run build

  code-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps: 
      - name: Code Checkout
        uses: actions/checkout@v4
        
      # Setup Java for sonar-scanner
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner -X
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=frontend/,backend/

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: code-analysis
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      # create .env file in backend dir
      - name: create .env file
        run: |
          chmod 755 backend
          cd backend
          printf "DEV_DB_USERNAME=%s\n" ${{ secrets.DEV_DB_USERNAME }} >> .env
          printf "DEV_DB_PASSWORD=%s\n" "$(echo ${{ secrets.DEV_DB_PASSWORD }})" >> .env
          printf "DEV_DB_NAME=%s\n" ${{ secrets.DEV_DB_NAME }} >> .env
          printf "DEV_DB_HOSTNAME=%s\n" ${{ secrets.DEV_DB_HOSTNAME }} >> .env
          printf "DEV_DB_DIALECT=%s\n" ${{ secrets.DEV_DB_DIALECT }} >> .env
          printf "DEV_DB_LOGGING=%s\n" ${{ secrets.DEV_DB_LOGGING }} >> .env
          if [ -f .env ]; then
            echo ".env file created successfully in backend directory"
          else
            echo "Error: .env file creation failed!"
          fi
        
      # - name: Debug aws credentials
      #   run: |
      #     echo access_key: $AWS_ACCESS_KEY_ID 
      #     echo secret_key: hidden

      - name: Build and upload frontend image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: conduitapp
          region: ${{ env.AWS_REGION }}
          tags: ${{ github.run_number }}-frontend
          daemon_off: false
          dockerfile: frontend/Dockerfile
          context: frontend

      - name: Build and upload backend image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: conduitapp
          region: ${{ env.AWS_REGION }}
          tags: ${{ github.run_number }}-backend
          daemon_off: false
          dockerfile: backend/Dockerfile
          context: backend
          
